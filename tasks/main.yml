---
# tasks file for git-download-suitecrm

- name: "Install Git and other needed packages"
  package: name={{ item }}  
  with_items: 
  - git
  - php7.0
  - php7.0-mbstring
  - php7.0-mysql
  - libapache2-mod-php7.0
  - php7.0-mcrypt
  - php7.0-curl
  - php7.0-json
  - php7.0-sqlite3
  - php7.0-zip
  - php7.0-xml
  - php-imap
  - php7.0-bcmath
  - php7.0-intl
  - php7.0-odbc
  - php7.0-soap
  - php7.0-gd
  notify: 
  - restart-apache
  when: manage_packages

- name: 'Upgrade APT to the lastest packages'
  action: apt upgrade=safe
  when: manage_packages

- name: "Changing PHP ini file options"
  ini_file: 
    path: /etc/php/7.0/apache2/php.ini
    section: MySQLi
    option: mysqli.allow_local_infile
    value: 0
  when: configure_mysqli_allow_local_infile

- name: "Changing PHP ini file options"
  ini_file: 
    path: /etc/php/7.0/apache2/php.ini
    section: PHP
    option: memory_limit
    value: 756M
  when: configure_memory_limit

- name: "Changing PHP ini file options"
  ini_file: 
    path: /etc/php/7.0/apache2/php.ini
    section: PHP
    option: post_max_size
    value: 64M
  when: configure_post_max_size

- name: "Changing PHP ini file options"
  ini_file: 
    path: /etc/php/7.0/apache2/php.ini
    section: PHP
    option: upload_max_filesize
    value: 64M
  when: configure_upload_max_filesize

- name: "Changing PHP ini file options"
  ini_file: 
    path: /etc/php/7.0/apache2/php.ini
    section: PHP
    option: max_input_time
    value: 60
  when: configure_max_input_time

- name: "Changing PHP ini file options"
  ini_file: 
    path: /etc/php/7.0/apache2/php.ini
    section: PHP
    option: max_execution_time
    value: 300
  when: configure_max_execution_time

# The timezone for PHP and for the OS need to be set to UTC for sync integrations to work properly
- name: "Set timezone in PHP ini file"
  ini_file: 
    path: /etc/php/7.0/apache2/php.ini
    section: PHP
    option: date.timezone
    value: UTC
  when: configure_php_timezone

# The timezone for PHP and for the OS need to be set to UTC for sync integrations to work properly
- name: 'Set Timezone to UTC'
  timezone:
    name: Etc/UTC

- name: "Debugging the web files path variable"
  debug: var=web_files_path

- name: "Debugging the web files path variable"
  debug: var=web_directory_for_application

- name: "Clearing out existing web/install directory"
  file: 
    state: absent 
    path: "{{ web_files_path }}{{ web_directory_for_application }}"

- name: "Re-creating web/install directory"
  file:
    path: "{{ web_files_path }}{{ web_directory_for_application }}"
    state: directory
    owner: "{{ web_user }}"
    group: "{{ web_group }}"
    mode: 0644
    recurse: yes

- name: "Git clone the repo"
  command: git clone {{ git_repo }} {{ web_files_path }}{{ web_directory_for_application }}
  args: 
    chdir: "{{ web_files_path }}"
  when: (installation_type == "new" or installation_type == "upgrade")

- name: "Debugging the git_branch variable"
  debug: var=git_branch

- name: "Debugging the tagged_release_version variable"
  debug: var=tagged_release_version

- name: "Checkout the desired release"
  command: git checkout {{ tagged_release_version }}
  args: 
    chdir: "{{ web_files_path }}{{ web_directory_for_application }}"
  when: (tagged_release_version != "") and 
          (installation_type == "new" or installation_type == "upgrade")

- name: "Checkout the desired branch"
  command: git checkout {{ git_branch }}
  args: 
    chdir: "{{ web_files_path }}{{ web_directory_for_application }}"
  when: (git_branch != "") and 
          (installation_type == "new" or installation_type == "upgrade")

- name: "Install Python MySQL bindings required for Ansible MySQL module"
  apt: 
    name: python-mysqldb 
    state: present

- name: "MYSQL | Create {{db_name}} database"
  mysql_db:
    name: "{{ db_name }}"
    login_password: "{{ mysql_root_password }}"
    state: present
    collation: "utf8_unicode_ci"

- name: "MYSQL | Create {{db_name}} user"
  mysql_user:
    login_password: "{{ mysql_root_password }}"
    name: "{{ db_user }}"
    password: "{{ db_password }}"
    host: '%'
    priv: '{{ db_name }}.*:TRIGGER,CREATE ROUTINE,CREATE TEMPORARY TABLES,CREATE VIEW,ALTER ROUTINE,REFERENCES,EVENT,SHOW VIEW,EXECUTE,ALTER,DROP,CREATE,INDEX,SELECT,INSERT,UPDATE,DELETE'
    state: present

- name: "Create and set a swap file if one is not set. SuiteCRM composer has problems otherwise"
  block:

    - name: Create swap directory
      command: mkdir -p /extraswap

    - name: Create swap space
      command: dd if=/dev/zero of=swapfile bs=1M count=2000
      args:
        chdir: /extraswap

    - name: Create swap space
      command: mkswap swapfile
      args:
        chdir: /extraswap

    - name: Turn swap on
      command: swapon swapfile
      args:
        chdir: /extraswap

    - name: Set swap file permission
      command: chmod 600 swapfile
      args:
        chdir: /extraswap

    - name: Add to fstab
      action: lineinfile dest=/etc/fstab regexp="swapfile" line="/extraswap/swapfile none swap sw 0 0" state=present

    - name: Set swapiness
      sysctl:
        name: vm.swappiness
        value: "1" 

  # Only execute if the swap is not already setup
  when: ansible_swaptotal_mb < 1

- name: "Install Composer program"
  script: ../files/install_composer.sh
  args: 
    creates: /usr/local/bin/composer
  when: install_composer

- name: "Install Composer packages"
  composer: 
    command: install
    working_dir: "{{ web_files_path }}{{ web_directory_for_application }}"
  when: (installation_type == "new" or installation_type == "upgrade")

- name: "Copying repair.php (to repair permissions after deployments) to /usr/local/bin of server"
  template:
    src: 'repair.php.j2'
    dest: '/usr/local/bin/repair.php'
    owner: root
    group: root
    mode: 0755

- name: "Setup cron job for SuiteCRM Schedulers"
  cron:
    user: "{{ web_user }}"
    name: "SuiteCRM Schedulers"
    minute: "*"
    hour: "*"
    day: "*"
    month: "*"
    weekday: "*"
    job: "php -f {{ web_files_path }}{{ web_directory_for_application }}/cron.php > /dev/null 2>&1"
  when: environment_type == "prod"

- name: "Run SuiteCRM Quick Repair and Rebuild script"
  shell: 'php /usr/local/bin/repair.php'
  args:
    chdir: '{{ web_files_path }}{{ web_directory_for_application }}'
  when: (installation_type == "new" or installation_type == "upgrade")

- name: "Setting ownership and permissions for web directory"
  file:
    path: "{{ web_files_path }}{{ web_directory_for_application }}"
    state: directory
    owner: "{{ web_user }}"
    group: "{{ web_group }}"
    mode: 0755
    recurse: yes
  when: (installation_type == "new" or installation_type == "upgrade")

- name: "Ensure directories are 0755"
  command: find {{ web_files_path }}{{ web_directory_for_application }} -type d -exec chmod -c 0755 {} \;
  register: chmod_result
  changed_when: "chmod_result.stdout != \"\""

- name: "Ensure files are 0644"
  command: find {{ web_files_path }}{{ web_directory_for_application }} -type f -exec chmod -c 0644 {} \;
  register: chmod_result
  changed_when: "chmod_result.stdout != \"\""

- name: "Removing Git folder from web server permissions"
  file:
    path: "{{ web_files_path }}{{ web_directory_for_application }}/.git"
    state: directory
    owner: root
    group: root
    mode: 0640
    recurse: yes
  when: (installation_type == "new" or installation_type == "upgrade")

- name: "Removing .gitignore from web server permissions"
  file:
    path: "{{ web_files_path }}{{ web_directory_for_application }}/.gitignore"
    state: file
    owner: root
    group: root
    mode: 0640
  when: (installation_type == "new" or installation_type == "upgrade")
  notify: restart-apache





