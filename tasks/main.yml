---
# tasks file for git-download-suitecrm


- name: "Add ondrej/php repository from PPA and install its signing key"
  ansible.builtin.apt_repository:
    repo: ppa:ondrej/php
  when: (ansible_distribution == 'Ubuntu')

- name: "Run apt update"
  apt:
    update_cache: yes

##  Handle any dependencies
# Some of these packages installed due to this - https://make.wordpress.org/hosting/handbook/handbook/server-environment/

- name: "Install Git and other needed packages"
  package: name={{ item }}
  with_items:
  - git
  - php{{ git_download_suitecrm_php_version }}
  - php{{ git_download_suitecrm_php_version }}-mbstring
  - php{{ git_download_suitecrm_php_version }}-common
  - php{{ git_download_suitecrm_php_version }}-mysql
  - php{{ git_download_suitecrm_php_version }}-mcrypt
  - php{{ git_download_suitecrm_php_version }}-curl
  - php{{ git_download_suitecrm_php_version }}-json
  - php{{ git_download_suitecrm_php_version }}-sqlite3
  - php{{ git_download_suitecrm_php_version }}-zip
  - php{{ git_download_suitecrm_php_version }}-xml
  - php{{ git_download_suitecrm_php_version }}-imap
  - php{{ git_download_suitecrm_php_version }}-bcmath
  - php{{ git_download_suitecrm_php_version }}-intl
  - php{{ git_download_suitecrm_php_version }}-odbc
  - php{{ git_download_suitecrm_php_version }}-soap
  - php{{ git_download_suitecrm_php_version }}-gd
  - libapache2-mod-php{{ git_download_suitecrm_php_version }}
  notify:
  - restart webserver
  when: git_download_suitecrm_manage_packages

- name: 'Upgrade APT to the latest packages'
  action: apt upgrade=safe
  when: git_download_suitecrm_manage_packages

- name: "Create and set a swap file if one is not set. SuiteCRM composer has problems otherwise"
  block:

    - name: Create swap directory
      command: mkdir -p /extraswap

    - name: Create swap space
      command: dd if=/dev/zero of=swapfile bs=1M count=2000
      args:
        chdir: /extraswap

    - name: Create swap space
      command: mkswap swapfile
      args:
        chdir: /extraswap

    - name: Turn swap on
      command: swapon swapfile
      args:
        chdir: /extraswap

    - name: Set swap file permission
      command: chmod 600 swapfile
      args:
        chdir: /extraswap

    - name: Add to fstab
      action: lineinfile dest=/etc/fstab regexp="swapfile" line="/extraswap/swapfile none swap sw 0 0" state=present

    - name: Set swapiness
      sysctl:
        name: vm.swappiness
        value: "1"

  # Only execute if the swap is not already setup
  when: ansible_swaptotal_mb < 1

- name: "Install Composer program"
  script: ../files/install_composer.sh
  args:
    creates: /usr/local/bin/composer
  when: git_download_suitecrm_install_composer

##  End - Handle any dependencies


##  Set needed PHP configuration

- name: "Changing PHP ini file options"
  ini_file:
    path: /etc/php/{{ git_download_suitecrm_php_version }}/apache2/php.ini
    section: MySQLi
    option: mysqli.allow_local_infile
    value: 0
  when: git_download_suitecrm_configure_mysqli_allow_local_infile

- name: "Changing PHP ini file options"
  ini_file:
    path: /etc/php/{{ git_download_suitecrm_php_version }}/apache2/php.ini
    section: PHP
    option: memory_limit
    value: 756M
  when: git_download_suitecrm_configure_memory_limit

- name: "Changing PHP ini file options"
  ini_file:
    path: /etc/php/{{ git_download_suitecrm_php_version }}/apache2/php.ini
    section: PHP
    option: post_max_size
    value: 64M
  when: git_download_suitecrm_configure_post_max_size

- name: "Changing PHP ini file options"
  ini_file:
    path: /etc/php/{{ git_download_suitecrm_php_version }}/apache2/php.ini
    section: PHP
    option: upload_max_filesize
    value: 64M
  when: git_download_suitecrm_configure_upload_max_filesize

- name: "Changing PHP ini file options"
  ini_file:
    path: /etc/php/{{ git_download_suitecrm_php_version }}/apache2/php.ini
    section: PHP
    option: max_input_time
    value: 60
  when: git_download_suitecrm_configure_max_input_time

- name: "Changing PHP ini file options"
  ini_file:
    path: /etc/php/{{ git_download_suitecrm_php_version }}/apache2/php.ini
    section: PHP
    option: max_execution_time
    value: 300
  when: git_download_suitecrm_configure_max_execution_time

##  End - Set needed PHP configuration


##  Set Timezone on Server (if required)

# The timezone for PHP and for the OS need to be set to UTC for sync integrations to work properly
- name: "Set timezone in PHP ini file"
  ini_file:
    path: /etc/php/{{ git_download_suitecrm_php_version }}/apache2/php.ini
    section: PHP
    option: date.timezone
    value: UTC
  when: git_download_suitecrm_configure_php_timezone

# The timezone for PHP and for the OS need to be set to UTC for sync integrations to work properly
- name: 'Set Timezone to UTC'
  timezone:
    name: Etc/UTC

##  End Set Timezone on Server (if required)


##  Prepping directory for web application / site

- name: "Debugging the web files path variable"
  debug: var=git_download_suitecrm_web_files_path

- name: "Debugging the web files path variable"
  debug: var=git_download_suitecrm_web_directory_for_application

- name: "Clearing out existing web/install directory"
  file:
    state: absent
    path: "{{ git_download_suitecrm_web_files_path }}{{ git_download_suitecrm_web_directory_for_application }}"

- name: "Re-creating web/install directory"
  file:
    path: "{{ git_download_suitecrm_web_files_path }}{{ git_download_suitecrm_web_directory_for_application }}"
    state: directory
    owner: "{{ git_download_suitecrm_web_user }}"
    group: "{{ git_download_suitecrm_web_group }}"
    mode: 0644
    recurse: yes

##  End - Prepping directory for web application / site


##  Deploy files from Git repo

- name: "Git clone the repo"
  command: git clone {{ git_download_suitecrm_git_repo }} {{ git_download_suitecrm_web_files_path }}{{ git_download_suitecrm_web_directory_for_application }}
  args:
    chdir: "{{ git_download_suitecrm_web_files_path }}"
  when: (git_download_suitecrm_installation_type == "new" or git_download_suitecrm_installation_type == "upgrade")

- name: "Debugging the git_download_suitecrm_git_branch variable"
  debug: var=git_download_suitecrm_git_branch

- name: "Debugging the git_download_suitecrm_tagged_release_version variable"
  debug: var=git_download_suitecrm_tagged_release_version

- name: "Checkout the desired release"
  command: git checkout {{ git_download_suitecrm_tagged_release_version }}
  args:
    chdir: "{{ git_download_suitecrm_web_files_path }}{{ git_download_suitecrm_web_directory_for_application }}"
  when: (git_download_suitecrm_tagged_release_version != "") and 
          (git_download_suitecrm_installation_type == "new" or git_download_suitecrm_installation_type == "upgrade")

- name: "Checkout the desired branch"
  command: git checkout {{ git_download_suitecrm_git_branch }}
  args:
    chdir: "{{ git_download_suitecrm_web_files_path }}{{ git_download_suitecrm_web_directory_for_application }}"
  when: (git_download_suitecrm_git_branch != "") and 
          (git_download_suitecrm_installation_type == "new" or git_download_suitecrm_installation_type == "upgrade")

##  End - Deploy files from Git repo


##  Create and/or handle any DB related tasks

- name: "Install Python MySQL bindings required for Ansible MySQL module"
  apt:
    name: python3-mysqldb
    state: present

- name: "MYSQL | Create {{git_download_suitecrm_db_name}} database"
  mysql_db:
    name: "{{ git_download_suitecrm_db_name }}"
    login_password: "{{ git_download_suitecrm_mysql_root_password }}"
    state: present
    collation: "utf8_unicode_ci"

- name: "MYSQL | Create {{git_download_suitecrm_db_name}} user"
  mysql_user:
    login_password: "{{ git_download_suitecrm_mysql_root_password }}"
    name: "{{ git_download_suitecrm_db_user }}"
    password: "{{ git_download_suitecrm_db_password }}"
    host: '%'
    priv: '{{ git_download_suitecrm_db_name }}.*:TRIGGER,CREATE ROUTINE,CREATE TEMPORARY TABLES,CREATE VIEW,ALTER ROUTINE,REFERENCES,EVENT,SHOW VIEW,EXECUTE,ALTER,DROP,CREATE,INDEX,SELECT,INSERT,UPDATE,DELETE'
    state: present

##  End - Create and/or handle any DB related tasks


##  Handle any template files and schedulers/cron jobs

- name: "Copying repair.php (to repair permissions after deployments) to /usr/local/bin of server"
  template:
    src: 'repair.php.j2'
    dest: '/usr/local/bin/repair.php'
    owner: root
    group: root
    mode: 0755

- name: "Making sure SuiteCRM Schedulers are removed since this is a QA or DEV Environment"
  cron:
    state: absent
    user: "{{ git_download_suitecrm_web_user }}"
    name: "SuiteCRM Schedulers"
    minute: "*"
    hour: "*"
    day: "*"
    month: "*"
    weekday: "*"
    job: "php -f {{ git_download_suitecrm_web_files_path }}{{ git_download_suitecrm_web_directory_for_application }}/cron.php > /dev/null 2>&1"
  when: (git_download_suitecrm_environment_type == "dev" or git_download_suitecrm_environment_type == "qa")

- name: "Adding cron job for SuiteCRM Schedulers since this is a PROD Environment"
  cron:
    state: present
    user: "{{ git_download_suitecrm_web_user }}"
    name: "SuiteCRM Schedulers"
    minute: "*"
    hour: "*"
    day: "*"
    month: "*"
    weekday: "*"
    job: "php -f {{ git_download_suitecrm_web_files_path }}{{ git_download_suitecrm_web_directory_for_application }}/cron.php > /dev/null 2>&1"
  when: git_download_suitecrm_environment_type == "prod"

##  End - Handle any template files and schedulers/cron jobs


##  Trigger any application / site specific deployment tasks (if not handled elsewhere)

- name: "Install Composer packages"
  composer:
    command: install
    working_dir: "{{ git_download_suitecrm_web_files_path }}{{ git_download_suitecrm_web_directory_for_application }}"
  when: (git_download_suitecrm_installation_type == "new" or git_download_suitecrm_installation_type == "upgrade")

- name: "Run SuiteCRM Quick Repair and Rebuild script"
  shell: 'php /usr/local/bin/repair.php'
  args:
    chdir: '{{ git_download_suitecrm_web_files_path }}{{ git_download_suitecrm_web_directory_for_application }}'
  when: (git_download_suitecrm_installation_type == "new" or git_download_suitecrm_installation_type == "upgrade")

##  End - Trigger any application / site specific deployment tasks


##  Set proper permissions for web application / site

- name: "Setting ownership and permissions for web directory - make sure all new files and directories inherit the group of the webserver"
  file:
    path: "{{ git_download_suitecrm_web_files_path }}{{ git_download_suitecrm_web_directory_for_application }}"
    state: directory
    owner: "{{ git_download_suitecrm_web_user }}"
    group: "{{ git_download_suitecrm_web_group }}"
    mode: g+s
    recurse: yes
#  when: (git_download_suitecrm_installation_type == "new" or git_download_suitecrm_installation_type == "upgrade")

- name: "Ensure directories are 0755"
  command: find {{ git_download_suitecrm_web_files_path }}{{ git_download_suitecrm_web_directory_for_application }} -type d -exec chmod -c 0755 {} \;
  register: chmod_result
  changed_when: "chmod_result.stdout != \"\""

- name: "Ensure files are 0644"
  command: find {{ git_download_suitecrm_web_files_path }}{{ git_download_suitecrm_web_directory_for_application }} -type f -exec chmod -c 0644 {} \;
  register: chmod_result
  changed_when: "chmod_result.stdout != \"\""

# These next two tasks should be covered above but leaving them in right now for good measure
- name: "Set user and group ownership for all existing files and directories"
  command: chown -R {{ git_download_suitecrm_web_user }}:{{ git_download_suitecrm_web_group }} {{ git_download_suitecrm_web_files_path }}{{ git_download_suitecrm_web_directory_for_application }}
  register: chmod_result
  changed_when: "chmod_result.stdout != \"\""

- name: "Ensure newly created directories and files have a group of {{ git_download_suitecrm_web_group }}"
  command: find {{ git_download_suitecrm_web_files_path }}{{ git_download_suitecrm_web_directory_for_application }} -type d -exec chmod g+s {} \;
  register: chmod_result
  changed_when: "chmod_result.stdout != \"\""

- name: "Removing Git folder from web server permissions"
  file:
    path: "{{ git_download_suitecrm_web_files_path }}{{ git_download_suitecrm_web_directory_for_application }}/.git"
    state: directory
    owner: root
    group: root
    mode: 0640
    recurse: yes
  when: (git_download_suitecrm_installation_type == "new" or git_download_suitecrm_installation_type == "upgrade")

- name: "Removing .gitignore from web server permissions"
  file:
    path: "{{ git_download_suitecrm_web_files_path }}{{ git_download_suitecrm_web_directory_for_application }}/.gitignore"
    state: file
    owner: root
    group: root
    mode: 0640
  when: (git_download_suitecrm_installation_type == "new" or git_download_suitecrm_installation_type == "upgrade")
  notify: restart webserver

##  End - Set proper permissions for web application / site



